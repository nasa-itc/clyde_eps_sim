// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "eps_win.hpp"
using namespace itc::eps;
EpsWindow::EpsWindow(int X, int Y, int W, int H, const char *L)
  : Fl_Window(X, Y, W, H, L) {
  _EpsWindow();
}

EpsWindow::EpsWindow(int W, int H, const char *L)
  : Fl_Window(0, 0, W, H, L) {
  clear_flag(16);
  _EpsWindow();
}

EpsWindow::EpsWindow()
  : Fl_Window(0, 0, 900, 850, "Clyde Space EPS 3G (3UA)") {
  clear_flag(16);
  _EpsWindow();
}

void EpsWindow::_EpsWindow() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ Fl_Group* o = new Fl_Group(15, 15, 140, 75, "Sim");
  o->box(FL_GTK_DOWN_FRAME);
  o->labelfont(1);
  o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
  { Fl_Light_Button* o = nos_status_out = new Fl_Light_Button(20, 40, 15, 20, "NOS Connection");
    nos_status_out->box(FL_NO_BOX);
    nos_status_out->down_box(FL_GTK_ROUND_DOWN_BOX);
    nos_status_out->selection_color((Fl_Color)2);
    nos_status_out->labelsize(12);
    nos_status_out->align(Fl_Align(FL_ALIGN_RIGHT));
    o->set_output();
  } // Fl_Light_Button* nos_status_out
  { sim_time_out = new Fl_Value_Output(75, 60, 70, 20, "Time (s)");
    sim_time_out->labelsize(12);
    sim_time_out->textsize(12);
  } // Fl_Value_Output* sim_time_out
  o->end();
} // Fl_Group* o
{ Fl_Group* o = new Fl_Group(15, 105, 140, 425, "Board");
  o->box(FL_GTK_DOWN_FRAME);
  o->labelfont(1);
  o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
  { Fl_Group* o = new Fl_Group(25, 125, 125, 70);
    o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    { firmware_out = new Fl_Value_Output(95, 130, 50, 20, "Firmware");
      firmware_out->labelsize(12);
      firmware_out->textsize(12);
    } // Fl_Value_Output* firmware_out
    { revision_out = new Fl_Value_Output(95, 150, 50, 20, "Revision");
      revision_out->labelsize(12);
      revision_out->textsize(12);
    } // Fl_Value_Output* revision_out
    { Fl_Output* o = checksum_out = new Fl_Output(95, 170, 50, 20, "Checksum");
      checksum_out->color(FL_BACKGROUND_COLOR);
      checksum_out->labelsize(12);
      checksum_out->textsize(12);
      o->cursor_color(FL_BACKGROUND_COLOR);
    } // Fl_Output* checksum_out
    o->end();
  } // Fl_Group* o
  { Fl_Box* o = new Fl_Box(25, 202, 120, 2);
    o->box(FL_THIN_DOWN_BOX);
  } // Fl_Box* o
  { Fl_Group* o = new Fl_Group(25, 230, 125, 90, "Reset Counts");
    o->labelsize(12);
    o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    { reset_power_on_out = new Fl_Value_Output(95, 235, 50, 20, "Power On");
      reset_power_on_out->labelsize(12);
      reset_power_on_out->textsize(12);
    } // Fl_Value_Output* reset_power_on_out
    { reset_brown_out = new Fl_Value_Output(95, 255, 50, 20, "Brown Out");
      reset_brown_out->labelsize(12);
      reset_brown_out->textsize(12);
    } // Fl_Value_Output* reset_brown_out
    { reset_manual_out = new Fl_Value_Output(95, 275, 50, 20, "Manual");
      reset_manual_out->labelsize(12);
      reset_manual_out->textsize(12);
    } // Fl_Value_Output* reset_manual_out
    { reset_wdt_out = new Fl_Value_Output(95, 295, 50, 20, "WDT");
      reset_wdt_out->labelsize(12);
      reset_wdt_out->textsize(12);
    } // Fl_Value_Output* reset_wdt_out
    o->end();
  } // Fl_Group* o
  { Fl_Box* o = new Fl_Box(25, 327, 120, 2);
    o->box(FL_THIN_DOWN_BOX);
  } // Fl_Box* o
  { Fl_Group* o = new Fl_Group(25, 355, 125, 110, "Status");
    o->labelsize(12);
    o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    { Fl_Light_Button* o = status_out[0] = new Fl_Light_Button(30, 355, 15, 20, "Invalid Cmd");
      status_out[0]->box(FL_NO_BOX);
      status_out[0]->down_box(FL_GTK_ROUND_DOWN_BOX);
      status_out[0]->selection_color((Fl_Color)1);
      status_out[0]->labelsize(12);
      status_out[0]->align(Fl_Align(FL_ALIGN_RIGHT));
      o->set_output();
    } // Fl_Light_Button* status_out[0]
    { Fl_Light_Button* o = status_out[1] = new Fl_Light_Button(30, 370, 14, 20, "WDT Reset");
      status_out[1]->box(FL_NO_BOX);
      status_out[1]->down_box(FL_GTK_ROUND_DOWN_BOX);
      status_out[1]->selection_color((Fl_Color)1);
      status_out[1]->labelsize(12);
      status_out[1]->align(Fl_Align(FL_ALIGN_RIGHT));
      o->set_output();
    } // Fl_Light_Button* status_out[1]
    { Fl_Light_Button* o = status_out[2] = new Fl_Light_Button(30, 385, 15, 20, "Invalid Data");
      status_out[2]->box(FL_NO_BOX);
      status_out[2]->down_box(FL_GTK_ROUND_DOWN_BOX);
      status_out[2]->selection_color((Fl_Color)1);
      status_out[2]->labelsize(12);
      status_out[2]->align(Fl_Align(FL_ALIGN_RIGHT));
      o->set_output();
    } // Fl_Light_Button* status_out[2]
    { Fl_Light_Button* o = status_out[3] = new Fl_Light_Button(30, 400, 15, 20, "Invalid Channel");
      status_out[3]->box(FL_NO_BOX);
      status_out[3]->down_box(FL_GTK_ROUND_DOWN_BOX);
      status_out[3]->selection_color((Fl_Color)1);
      status_out[3]->labelsize(12);
      status_out[3]->align(Fl_Align(FL_ALIGN_RIGHT));
      o->set_output();
    } // Fl_Light_Button* status_out[3]
    { Fl_Light_Button* o = status_out[4] = new Fl_Light_Button(30, 415, 15, 20, "EEPROM Error");
      status_out[4]->box(FL_NO_BOX);
      status_out[4]->down_box(FL_GTK_ROUND_DOWN_BOX);
      status_out[4]->selection_color((Fl_Color)1);
      status_out[4]->labelsize(12);
      status_out[4]->align(Fl_Align(FL_ALIGN_RIGHT));
      o->set_output();
    } // Fl_Light_Button* status_out[4]
    { Fl_Light_Button* o = status_out[5] = new Fl_Light_Button(30, 430, 15, 20, "Power On Reset");
      status_out[5]->box(FL_NO_BOX);
      status_out[5]->down_box(FL_GTK_ROUND_DOWN_BOX);
      status_out[5]->selection_color((Fl_Color)1);
      status_out[5]->labelsize(12);
      status_out[5]->align(Fl_Align(FL_ALIGN_RIGHT));
      o->set_output();
    } // Fl_Light_Button* status_out[5]
    { Fl_Light_Button* o = status_out[6] = new Fl_Light_Button(30, 445, 15, 20, "Brown Out Reset");
      status_out[6]->box(FL_NO_BOX);
      status_out[6]->down_box(FL_GTK_ROUND_DOWN_BOX);
      status_out[6]->selection_color((Fl_Color)1);
      status_out[6]->labelsize(12);
      status_out[6]->align(Fl_Align(FL_ALIGN_RIGHT));
      o->set_output();
    } // Fl_Light_Button* status_out[6]
    o->end();
  } // Fl_Group* o
  { Fl_Box* o = new Fl_Box(25, 470, 120, 2);
    o->box(FL_THIN_DOWN_BOX);
  } // Fl_Box* o
  { Fl_Output* o = error_code_out = new Fl_Output(90, 480, 55, 20, "Last Error");
    error_code_out->color(FL_BACKGROUND_COLOR);
    error_code_out->labelsize(12);
    error_code_out->textsize(12);
    o->cursor_color(FL_BACKGROUND_COLOR);
  } // Fl_Output* error_code_out
  { Fl_Output* o = error_msg_out = new Fl_Output(25, 500, 120, 20);
    error_msg_out->color(FL_BACKGROUND_COLOR);
    error_msg_out->selection_color(FL_BACKGROUND_COLOR);
    error_msg_out->labelsize(12);
    error_msg_out->textfont(2);
    error_msg_out->textsize(12);
    o->cursor_color(FL_BACKGROUND_COLOR);
  } // Fl_Output* error_msg_out
  o->end();
} // Fl_Group* o
{ Fl_Group* o = new Fl_Group(170, 15, 715, 821, "Telemetry");
  o->box(FL_GTK_DOWN_FRAME);
  o->color((Fl_Color)51);
  o->labelfont(1);
  o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
  { Fl_Group* o = new Fl_Group(175, 40, 235, 796, "Battery Charge Regulator");
    o->labelsize(12);
    o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    { Fl_Group* o = new Fl_Group(175, 60, 230, 150);
      { Fl_Value_Output* o = new Fl_Value_Output(235, 65, 45, 20, "VBCR1");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VBCR1].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 85, 45, 20, "IBCR1A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR1A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 105, 45, 20, "IBCR1B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR1B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 125, 45, 20, "TBCR1A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR1A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 145, 45, 20, "TBCR1B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR1B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 165, 45, 20, "SDBCR1A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR1A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 185, 45, 20, "SDBCR1B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR1B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 65, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VBCR1].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 85, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR1A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 105, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR1B].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 125, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR1A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 145, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR1B].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 165, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR1A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 185, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR1B].analog_out = o;
      } // Fl_Value_Output* o
      { TlmInput* o = new TlmInput(340, 65, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_VBCR1].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 85, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IBCR1A].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 105, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IBCR1B].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 125, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_TBCR1A].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 145, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_TBCR1B].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 165, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_SDBCR1A].analog_in = o;
        o->type(FL_INT_INPUT);
        o->step(1);
        o->range(0, 1024);
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 185, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_SDBCR1B].analog_in = o;
        o->type(FL_INT_INPUT);
        o->step(1);
        o->range(0, 1024);
      } // TlmInput* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(175, 215, 230, 150);
      { Fl_Value_Output* o = new Fl_Value_Output(235, 220, 45, 20, "VBCR2");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VBCR2].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 240, 45, 20, "IBCR2A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR2A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 260, 45, 20, "IBCR2B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR2B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 280, 45, 20, "TBCR2A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR2A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 300, 45, 20, "TBCR2B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR2B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 320, 45, 20, "SDBCR2A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR2A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 340, 45, 20, "SDBCR2B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR2B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 220, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VBCR2].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 240, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR2A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 260, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR2B].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 280, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR2A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 300, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR2B].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 320, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR2A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 340, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR2B].analog_out = o;
      } // Fl_Value_Output* o
      { TlmInput* o = new TlmInput(340, 220, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_VBCR2].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 240, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IBCR2A].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 260, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IBCR2B].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 280, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_TBCR2A].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 300, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_TBCR2B].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 320, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_SDBCR2A].analog_in = o;
        o->type(FL_INT_INPUT);
        o->step(1);
        o->range(0, 1024);
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 340, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_SDBCR2B].analog_in = o;
        o->type(FL_INT_INPUT);
        o->step(1);
        o->range(0, 1024);
      } // TlmInput* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(175, 370, 230, 150);
      { Fl_Value_Output* o = new Fl_Value_Output(235, 375, 45, 20, "VBCR3");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VBCR3].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 395, 45, 20, "IBCR3A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR3A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 415, 45, 20, "IBCR3B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR3B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 435, 45, 20, "TBCR3A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR3A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 455, 45, 20, "TBCR3B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR3B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 475, 45, 20, "SDBCR3A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR3A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 495, 45, 20, "SDBCR3B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR3B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 375, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VBCR3].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 395, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR3A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 415, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR3B].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 435, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR3A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 455, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR3B].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 475, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR3A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 495, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR3B].analog_out = o;
      } // Fl_Value_Output* o
      { TlmInput* o = new TlmInput(340, 375, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_VBCR3].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 395, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IBCR3A].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 415, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IBCR3B].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 435, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_TBCR3A].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 455, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_TBCR3B].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 475, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_SDBCR3A].analog_in = o;
        o->type(FL_INT_INPUT);
        o->step(1);
        o->range(0, 1024);
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 495, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_SDBCR3B].analog_in = o;
        o->type(FL_INT_INPUT);
        o->step(1);
        o->range(0, 1024);
      } // TlmInput* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(175, 525, 230, 150);
      { Fl_Value_Output* o = new Fl_Value_Output(235, 530, 45, 20, "VBCR4");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VBCR4].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 550, 45, 20, "IBCR4A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR4A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 570, 45, 20, "IBCR4B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR4B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 590, 45, 20, "TBCR4A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR4A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 610, 45, 20, "TBCR4B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR4B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 630, 45, 20, "SDBCR4A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR4A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 650, 45, 20, "SDBCR4B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR4B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 530, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VBCR4].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 550, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR4A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 570, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR4B].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 590, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR4A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 610, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR4B].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 630, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR4A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 650, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR4B].analog_out = o;
      } // Fl_Value_Output* o
      { TlmInput* o = new TlmInput(340, 530, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_VBCR4].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 550, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IBCR4A].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 570, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IBCR4B].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 590, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_TBCR4A].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 610, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_TBCR4B].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 630, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_SDBCR4A].analog_in = o;
        o->type(FL_INT_INPUT);
        o->step(1);
        o->range(0, 1024);
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 650, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_SDBCR4B].analog_in = o;
        o->type(FL_INT_INPUT);
        o->step(1);
        o->range(0, 1024);
      } // TlmInput* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(175, 680, 230, 150);
      { Fl_Value_Output* o = new Fl_Value_Output(235, 685, 45, 20, "VBCR5");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VBCR5].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 705, 45, 20, "IBCR5A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR5A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 725, 45, 20, "IBCR5B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR5B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 745, 45, 20, "TBCR5A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR5A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 765, 45, 20, "TBCR5B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR5B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 785, 45, 20, "SDBCR5A");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR5A].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(235, 805, 45, 20, "SDBCR5B");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR5B].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 685, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VBCR5].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 705, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR5A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 725, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IBCR5B].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 745, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR5A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 765, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_TBCR5B].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 785, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR5A].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(280, 805, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_SDBCR5B].analog_out = o;
      } // Fl_Value_Output* o
      { TlmInput* o = new TlmInput(340, 685, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_VBCR5].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 705, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IBCR5A].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 725, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IBCR5B].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 745, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_TBCR5A].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 765, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_TBCR5B].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 785, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_SDBCR5A].analog_in = o;
        o->type(FL_INT_INPUT);
        o->step(1);
        o->range(0, 1024);
      } // TlmInput* o
      { TlmInput* o = new TlmInput(340, 805, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_SDBCR5B].analog_in = o;
        o->type(FL_INT_INPUT);
        o->step(1);
        o->range(0, 1024);
      } // TlmInput* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Group* o
  { Fl_Group* o = new Fl_Group(410, 40, 240, 240, "Power Conditioning Module");
    o->labelsize(12);
    o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    { Fl_Group* o = new Fl_Group(410, 60, 235, 50);
      { Fl_Value_Output* o = new Fl_Value_Output(475, 65, 45, 20, "VPCMBATV");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VPCMBATV].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(475, 85, 45, 20, "IPCMBATV");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IPCMBATV].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(520, 65, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VPCMBATV].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(520, 85, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IPCMBATV].analog_out = o;
      } // Fl_Value_Output* o
      { TlmInput* o = new TlmInput(580, 65, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_VPCMBATV].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(580, 85, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IPCMBATV].analog_in = o;
      } // TlmInput* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(410, 115, 235, 50);
      { Fl_Value_Output* o = new Fl_Value_Output(475, 120, 45, 20, "VPCM12V");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VPCM12V].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(475, 140, 45, 20, "IPCM12V");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IPCM12V].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(520, 120, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VPCM12V].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(520, 140, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IPCM12V].analog_out = o;
      } // Fl_Value_Output* o
      { TlmInput* o = new TlmInput(580, 120, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_VPCM12V].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(580, 140, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IPCM12V].analog_in = o;
      } // TlmInput* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(410, 170, 235, 50);
      { Fl_Value_Output* o = new Fl_Value_Output(475, 175, 45, 20, "VPCM5V");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VPCM5V].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(475, 195, 45, 20, "IPCM5V");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IPCM5V].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(520, 175, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VPCM5V].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(520, 195, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IPCM5V].analog_out = o;
      } // Fl_Value_Output* o
      { TlmInput* o = new TlmInput(580, 175, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_VPCM5V].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(580, 195, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IPCM5V].analog_in = o;
      } // TlmInput* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(410, 225, 235, 50);
      { Fl_Value_Output* o = new Fl_Value_Output(475, 230, 45, 20, "VPCM3V3");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VPCM3V3].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(475, 250, 45, 20, "IPCM3V3");
        o->labelfont(4);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IPCM3V3].digital_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(520, 230, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_VPCM3V3].analog_out = o;
      } // Fl_Value_Output* o
      { Fl_Value_Output* o = new Fl_Value_Output(520, 250, 60, 20);
        o->labelsize(12);
        o->textsize(12);
        tlm[CHANNEL_IPCM3V3].analog_out = o;
      } // Fl_Value_Output* o
      { TlmInput* o = new TlmInput(580, 230, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_VPCM3V3].analog_in = o;
      } // TlmInput* o
      { TlmInput* o = new TlmInput(580, 250, 60, 20);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->textsize(12);
        o->align(Fl_Align(FL_ALIGN_LEFT));
        o->when(FL_WHEN_CHANGED);
        tlm[CHANNEL_IPCM3V3].analog_in = o;
      } // TlmInput* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Group* o
  { Fl_Group* o = new Fl_Group(410, 295, 240, 135, "EPS");
    o->labelsize(12);
    o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    { Fl_Value_Output* o = new Fl_Value_Output(475, 320, 45, 20, "IIDIODE");
      o->labelfont(4);
      o->labelsize(12);
      o->textsize(12);
      tlm[CHANNEL_IIDIODE].digital_out = o;
    } // Fl_Value_Output* o
    { Fl_Value_Output* o = new Fl_Value_Output(475, 340, 45, 20, "VIDIODE");
      o->labelfont(4);
      o->labelsize(12);
      o->textsize(12);
      tlm[CHANNEL_VIDIODE].digital_out = o;
    } // Fl_Value_Output* o
    { Fl_Value_Output* o = new Fl_Value_Output(475, 360, 45, 20, "I3V3_DRW");
      o->labelfont(4);
      o->labelsize(12);
      o->textsize(12);
      tlm[CHANNEL_I3V3_DRW].digital_out = o;
    } // Fl_Value_Output* o
    { Fl_Value_Output* o = new Fl_Value_Output(475, 380, 45, 20, "I5V_DRW");
      o->labelfont(4);
      o->labelsize(12);
      o->textsize(12);
      tlm[CHANNEL_I5V_DRW].digital_out = o;
    } // Fl_Value_Output* o
    { Fl_Value_Output* o = new Fl_Value_Output(475, 400, 45, 20, "TBRD");
      o->labelfont(4);
      o->labelsize(12);
      o->textsize(12);
      tlm[CHANNEL_TBRD].digital_out = o;
    } // Fl_Value_Output* o
    { Fl_Value_Output* o = new Fl_Value_Output(520, 320, 60, 20);
      o->labelsize(12);
      o->textsize(12);
      tlm[CHANNEL_IIDIODE].analog_out = o;
    } // Fl_Value_Output* o
    { Fl_Value_Output* o = new Fl_Value_Output(520, 340, 60, 20);
      o->labelsize(12);
      o->textsize(12);
      tlm[CHANNEL_VIDIODE].analog_out = o;
    } // Fl_Value_Output* o
    { Fl_Value_Output* o = new Fl_Value_Output(520, 360, 60, 20);
      o->labelsize(12);
      o->textsize(12);
      tlm[CHANNEL_I3V3_DRW].analog_out = o;
    } // Fl_Value_Output* o
    { Fl_Value_Output* o = new Fl_Value_Output(520, 380, 60, 20);
      o->labelsize(12);
      o->textsize(12);
      tlm[CHANNEL_I5V_DRW].analog_out = o;
    } // Fl_Value_Output* o
    { Fl_Value_Output* o = new Fl_Value_Output(520, 400, 60, 20);
      o->labelsize(12);
      o->textsize(12);
      tlm[CHANNEL_TBRD].analog_out = o;
    } // Fl_Value_Output* o
    { TlmInput* o = new TlmInput(580, 320, 60, 20);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->selection_color(FL_SELECTION_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->textsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      o->when(FL_WHEN_CHANGED);
      tlm[CHANNEL_IIDIODE].analog_in = o;
    } // TlmInput* o
    { TlmInput* o = new TlmInput(580, 340, 60, 20);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->selection_color(FL_SELECTION_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->textsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      o->when(FL_WHEN_CHANGED);
      tlm[CHANNEL_VIDIODE].analog_in = o;
    } // TlmInput* o
    { TlmInput* o = new TlmInput(580, 360, 60, 20);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->selection_color(FL_SELECTION_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->textsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      o->when(FL_WHEN_CHANGED);
      tlm[CHANNEL_I3V3_DRW].analog_in = o;
    } // TlmInput* o
    { TlmInput* o = new TlmInput(580, 380, 60, 20);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->selection_color(FL_SELECTION_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->textsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      o->when(FL_WHEN_CHANGED);
      tlm[CHANNEL_I5V_DRW].analog_in = o;
    } // TlmInput* o
    { TlmInput* o = new TlmInput(580, 400, 60, 20);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->selection_color(FL_SELECTION_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->textsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      o->when(FL_WHEN_CHANGED);
      tlm[CHANNEL_TBRD].analog_in = o;
    } // TlmInput* o
    o->end();
  } // Fl_Group* o
  { Fl_Group* o = new Fl_Group(650, 40, 230, 785, "Power Distribution Module");
    o->labelsize(12);
    o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    { Fl_Group* o = new Fl_Group(655, 60, 225, 50);
      { Fl_Group* o = new Fl_Group(655, 60, 205, 50);
        { Fl_Value_Output* o = new Fl_Value_Output(690, 65, 45, 20, "VSW1");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW1].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(690, 85, 45, 20, "ISW1");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW1].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 65, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW1].analog_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 85, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW1].analog_out = o;
        } // Fl_Value_Output* o
        { TlmInput* o = new TlmInput(795, 65, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_VSW1].analog_in = o;
        } // TlmInput* o
        { TlmInput* o = new TlmInput(795, 85, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_ISW1].analog_in = o;
        } // TlmInput* o
        o->end();
      } // Fl_Group* o
      { switch_in[0] = new itc::eps::SwitchButton(860, 75, 20, 20);
        switch_in[0]->box(FL_NO_BOX);
        switch_in[0]->color(FL_BACKGROUND_COLOR);
        switch_in[0]->selection_color((Fl_Color)2);
        switch_in[0]->labeltype(FL_NORMAL_LABEL);
        switch_in[0]->labelfont(0);
        switch_in[0]->labelsize(25);
        switch_in[0]->labelcolor(FL_FOREGROUND_COLOR);
        switch_in[0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        switch_in[0]->when(FL_WHEN_RELEASE);
      } // itc::eps::SwitchButton* switch_in[0]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(655, 115, 225, 50);
      { Fl_Group* o = new Fl_Group(655, 115, 205, 50);
        { Fl_Value_Output* o = new Fl_Value_Output(690, 120, 45, 20, "VSW2");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW2].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(690, 140, 45, 20, "ISW2");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW2].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 120, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW2].analog_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 140, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW2].analog_out = o;
        } // Fl_Value_Output* o
        { TlmInput* o = new TlmInput(795, 120, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_VSW2].analog_in = o;
        } // TlmInput* o
        { TlmInput* o = new TlmInput(795, 140, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_ISW2].analog_in = o;
        } // TlmInput* o
        o->end();
      } // Fl_Group* o
      { switch_in[1] = new itc::eps::SwitchButton(860, 130, 20, 20);
        switch_in[1]->box(FL_NO_BOX);
        switch_in[1]->color(FL_BACKGROUND_COLOR);
        switch_in[1]->selection_color((Fl_Color)2);
        switch_in[1]->labeltype(FL_NORMAL_LABEL);
        switch_in[1]->labelfont(0);
        switch_in[1]->labelsize(25);
        switch_in[1]->labelcolor(FL_FOREGROUND_COLOR);
        switch_in[1]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        switch_in[1]->when(FL_WHEN_RELEASE);
      } // itc::eps::SwitchButton* switch_in[1]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(655, 170, 225, 50);
      { Fl_Group* o = new Fl_Group(655, 170, 205, 50);
        { Fl_Value_Output* o = new Fl_Value_Output(690, 175, 45, 20, "VSW3");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW3].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(690, 195, 45, 20, "ISW3");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW3].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 175, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW3].analog_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 195, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW3].analog_out = o;
        } // Fl_Value_Output* o
        { TlmInput* o = new TlmInput(795, 175, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_VSW3].analog_in = o;
        } // TlmInput* o
        { TlmInput* o = new TlmInput(795, 195, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_ISW3].analog_in = o;
        } // TlmInput* o
        o->end();
      } // Fl_Group* o
      { switch_in[2] = new itc::eps::SwitchButton(860, 185, 20, 20);
        switch_in[2]->box(FL_NO_BOX);
        switch_in[2]->color(FL_BACKGROUND_COLOR);
        switch_in[2]->selection_color((Fl_Color)2);
        switch_in[2]->labeltype(FL_NORMAL_LABEL);
        switch_in[2]->labelfont(0);
        switch_in[2]->labelsize(25);
        switch_in[2]->labelcolor(FL_FOREGROUND_COLOR);
        switch_in[2]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        switch_in[2]->when(FL_WHEN_RELEASE);
      } // itc::eps::SwitchButton* switch_in[2]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(655, 225, 225, 55);
      { Fl_Group* o = new Fl_Group(655, 225, 205, 50);
        { Fl_Value_Output* o = new Fl_Value_Output(690, 230, 45, 20, "VSW4");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW4].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(690, 250, 45, 20, "ISW4");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW4].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 230, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW4].analog_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 250, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW4].analog_out = o;
        } // Fl_Value_Output* o
        { TlmInput* o = new TlmInput(795, 230, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_VSW4].analog_in = o;
        } // TlmInput* o
        { TlmInput* o = new TlmInput(795, 250, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_ISW4].analog_in = o;
        } // TlmInput* o
        o->end();
      } // Fl_Group* o
      { switch_in[3] = new itc::eps::SwitchButton(860, 240, 20, 20);
        switch_in[3]->box(FL_NO_BOX);
        switch_in[3]->color(FL_BACKGROUND_COLOR);
        switch_in[3]->selection_color((Fl_Color)2);
        switch_in[3]->labeltype(FL_NORMAL_LABEL);
        switch_in[3]->labelfont(0);
        switch_in[3]->labelsize(25);
        switch_in[3]->labelcolor(FL_FOREGROUND_COLOR);
        switch_in[3]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        switch_in[3]->when(FL_WHEN_RELEASE);
      } // itc::eps::SwitchButton* switch_in[3]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(655, 280, 225, 50);
      { Fl_Group* o = new Fl_Group(655, 280, 205, 50);
        { Fl_Value_Output* o = new Fl_Value_Output(690, 285, 45, 20, "VSW5");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW5].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(690, 305, 45, 20, "ISW5");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW5].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 285, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW5].analog_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 305, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW5].analog_out = o;
        } // Fl_Value_Output* o
        { TlmInput* o = new TlmInput(795, 285, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_VSW5].analog_in = o;
        } // TlmInput* o
        { TlmInput* o = new TlmInput(795, 305, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_ISW5].analog_in = o;
        } // TlmInput* o
        o->end();
      } // Fl_Group* o
      { switch_in[4] = new itc::eps::SwitchButton(860, 295, 20, 20);
        switch_in[4]->box(FL_NO_BOX);
        switch_in[4]->color(FL_BACKGROUND_COLOR);
        switch_in[4]->selection_color((Fl_Color)2);
        switch_in[4]->labeltype(FL_NORMAL_LABEL);
        switch_in[4]->labelfont(0);
        switch_in[4]->labelsize(25);
        switch_in[4]->labelcolor(FL_FOREGROUND_COLOR);
        switch_in[4]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        switch_in[4]->when(FL_WHEN_RELEASE);
      } // itc::eps::SwitchButton* switch_in[4]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(655, 335, 225, 50);
      { Fl_Group* o = new Fl_Group(655, 335, 205, 50);
        { Fl_Value_Output* o = new Fl_Value_Output(690, 340, 45, 20, "VSW6");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW6].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(690, 360, 45, 20, "ISW6");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW6].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 340, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW6].analog_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 360, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW6].analog_out = o;
        } // Fl_Value_Output* o
        { TlmInput* o = new TlmInput(795, 340, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_VSW6].analog_in = o;
        } // TlmInput* o
        { TlmInput* o = new TlmInput(795, 360, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_ISW6].analog_in = o;
        } // TlmInput* o
        o->end();
      } // Fl_Group* o
      { switch_in[5] = new itc::eps::SwitchButton(860, 350, 20, 20);
        switch_in[5]->box(FL_NO_BOX);
        switch_in[5]->color(FL_BACKGROUND_COLOR);
        switch_in[5]->selection_color((Fl_Color)2);
        switch_in[5]->labeltype(FL_NORMAL_LABEL);
        switch_in[5]->labelfont(0);
        switch_in[5]->labelsize(25);
        switch_in[5]->labelcolor(FL_FOREGROUND_COLOR);
        switch_in[5]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        switch_in[5]->when(FL_WHEN_RELEASE);
      } // itc::eps::SwitchButton* switch_in[5]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(655, 390, 225, 50);
      { Fl_Group* o = new Fl_Group(655, 390, 205, 50);
        { Fl_Value_Output* o = new Fl_Value_Output(690, 395, 45, 20, "VSW7");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW7].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(690, 415, 45, 20, "ISW7");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW7].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 395, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW7].analog_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 415, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW7].analog_out = o;
        } // Fl_Value_Output* o
        { TlmInput* o = new TlmInput(795, 395, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_VSW7].analog_in = o;
        } // TlmInput* o
        { TlmInput* o = new TlmInput(795, 415, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_ISW7].analog_in = o;
        } // TlmInput* o
        o->end();
      } // Fl_Group* o
      { switch_in[6] = new itc::eps::SwitchButton(860, 405, 20, 20);
        switch_in[6]->box(FL_NO_BOX);
        switch_in[6]->color(FL_BACKGROUND_COLOR);
        switch_in[6]->selection_color((Fl_Color)2);
        switch_in[6]->labeltype(FL_NORMAL_LABEL);
        switch_in[6]->labelfont(0);
        switch_in[6]->labelsize(25);
        switch_in[6]->labelcolor(FL_FOREGROUND_COLOR);
        switch_in[6]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        switch_in[6]->when(FL_WHEN_RELEASE);
      } // itc::eps::SwitchButton* switch_in[6]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(655, 445, 225, 50);
      { Fl_Group* o = new Fl_Group(655, 445, 205, 50);
        { Fl_Value_Output* o = new Fl_Value_Output(690, 450, 45, 20, "VSW8");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW8].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(690, 470, 45, 20, "ISW8");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW8].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 450, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW8].analog_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 470, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW8].analog_out = o;
        } // Fl_Value_Output* o
        { TlmInput* o = new TlmInput(795, 450, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_VSW8].analog_in = o;
        } // TlmInput* o
        { TlmInput* o = new TlmInput(795, 470, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_ISW8].analog_in = o;
        } // TlmInput* o
        o->end();
      } // Fl_Group* o
      { switch_in[7] = new itc::eps::SwitchButton(860, 460, 20, 20);
        switch_in[7]->box(FL_NO_BOX);
        switch_in[7]->color(FL_BACKGROUND_COLOR);
        switch_in[7]->selection_color((Fl_Color)2);
        switch_in[7]->labeltype(FL_NORMAL_LABEL);
        switch_in[7]->labelfont(0);
        switch_in[7]->labelsize(25);
        switch_in[7]->labelcolor(FL_FOREGROUND_COLOR);
        switch_in[7]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        switch_in[7]->when(FL_WHEN_RELEASE);
      } // itc::eps::SwitchButton* switch_in[7]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(655, 500, 225, 50);
      { Fl_Group* o = new Fl_Group(655, 500, 205, 50);
        { Fl_Value_Output* o = new Fl_Value_Output(690, 505, 45, 20, "VSW9");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW9].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(690, 525, 45, 20, "ISW9");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW9].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 505, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW9].analog_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 525, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW9].analog_out = o;
        } // Fl_Value_Output* o
        { TlmInput* o = new TlmInput(795, 505, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_VSW9].analog_in = o;
        } // TlmInput* o
        { TlmInput* o = new TlmInput(795, 525, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_ISW9].analog_in = o;
        } // TlmInput* o
        o->end();
      } // Fl_Group* o
      { switch_in[8] = new itc::eps::SwitchButton(860, 515, 20, 20);
        switch_in[8]->box(FL_NO_BOX);
        switch_in[8]->color(FL_BACKGROUND_COLOR);
        switch_in[8]->selection_color((Fl_Color)2);
        switch_in[8]->labeltype(FL_NORMAL_LABEL);
        switch_in[8]->labelfont(0);
        switch_in[8]->labelsize(25);
        switch_in[8]->labelcolor(FL_FOREGROUND_COLOR);
        switch_in[8]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        switch_in[8]->when(FL_WHEN_RELEASE);
      } // itc::eps::SwitchButton* switch_in[8]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(655, 555, 225, 50);
      { Fl_Group* o = new Fl_Group(655, 555, 205, 50);
        { Fl_Value_Output* o = new Fl_Value_Output(690, 560, 45, 20, "VSW10");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW10].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(690, 580, 45, 20, "ISW10");
          o->labelfont(4);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW10].digital_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 560, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_VSW10].analog_out = o;
        } // Fl_Value_Output* o
        { Fl_Value_Output* o = new Fl_Value_Output(735, 580, 60, 20);
          o->labelsize(12);
          o->textsize(12);
          tlm[CHANNEL_ISW10].analog_out = o;
        } // Fl_Value_Output* o
        { TlmInput* o = new TlmInput(795, 560, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_VSW10].analog_in = o;
        } // TlmInput* o
        { TlmInput* o = new TlmInput(795, 580, 60, 20);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(12);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          tlm[CHANNEL_ISW10].analog_in = o;
        } // TlmInput* o
        o->end();
      } // Fl_Group* o
      { switch_in[9] = new itc::eps::SwitchButton(860, 570, 20, 20);
        switch_in[9]->box(FL_NO_BOX);
        switch_in[9]->color(FL_BACKGROUND_COLOR);
        switch_in[9]->selection_color((Fl_Color)2);
        switch_in[9]->labeltype(FL_NORMAL_LABEL);
        switch_in[9]->labelfont(0);
        switch_in[9]->labelsize(25);
        switch_in[9]->labelcolor(FL_FOREGROUND_COLOR);
        switch_in[9]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        switch_in[9]->when(FL_WHEN_RELEASE);
      } // itc::eps::SwitchButton* switch_in[9]
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Group* o
  o->end();
} // Fl_Group* o
end();
}
